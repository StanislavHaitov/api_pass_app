pipeline {
    agent any

    environment {
        DOCKER_IMAGE = "stanislavhaitov/pass_app"
        DOCKER_CREDENTIALS_ID = "dockerhub-credentials-id"
        KUBECONFIG = "~/.kube/config"
        EMAIL_ADDR = credentials('email-address-id')
        GIT_REPO_URL = 'git@github.com:StanislavHaitov/api_pass_app.git'
        GIT_CREDENTIALS_ID = 'github-credentials-id'
    }

    stages {
        stage('Build') {
            steps {
                script {
                    // Checkout the repository
                    echo "Checking out the repository from branch: ${env.BRANCH_NAME}"
                    git credentialsId: GIT_CREDENTIALS_ID, url: GIT_REPO_URL, branch: env.BRANCH_NAME
                    // Build the Docker image
                    sh "docker build -t $DOCKER_IMAGE:${env.BRANCH_NAME}-build-${env.BUILD_NUMBER} ."                   
                }
            }
        }

        stage('Test') {
            steps {
                script {
                    // Run tests inside the Docker container
                    sh "docker run --rm $DOCKER_IMAGE:${env.BRANCH_NAME}-build-${env.BUILD_NUMBER} pytest"
                }
            }
        }

        stage('Deploy') {
    when {
        allOf {
            branch 'production'
            // Uncomment the following line if you want to add merge condition
            // changeRequest target: 'production'
        }
    }
    steps {
        script {
            // Push tested image to DockerHub
            withCredentials([usernamePassword(credentialsId: DOCKER_CREDENTIALS_ID, usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                sh "echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin"
                sh "docker push $DOCKER_IMAGE:${env.BRANCH_NAME}-build-${env.BUILD_NUMBER}"
            }
            
            echo 'Deploying to Minikube...'

            // Tag the tested image as 'latest' and push it to Docker Hub
            sh "docker tag $DOCKER_IMAGE:${env.BRANCH_NAME}-build-${env.BUILD_NUMBER} $DOCKER_IMAGE:latest"
            sh "docker push $DOCKER_IMAGE:latest"
            sh "docker rmi $DOCKER_IMAGE:latest"

            // Use SSH to copy the static deploy script from the project to the remote machine
            sshagent(['ssh-remote-key']) {
                sh "scp scripts/deploy_script.sh stanislav-haitov@192.168.1.126:/tmp/deploy_script.sh"
                sh "ssh stanislav-haitov@192.168.1.126 'chmod +x /tmp/deploy_script.sh && /tmp/deploy_script.sh'"
            }
        }
    }
}
    }          
    post {
        always {
            echo 'Cleaning up...'
            cleanWs()
            sh "docker rmi $DOCKER_IMAGE:${env.BRANCH_NAME}-build-${env.BUILD_NUMBER}"
        }
        success {
            script {
                withCredentials([string(credentialsId: 'email-address-id', variable: 'SECURE_EMAIL_ADDR')]) {
                    def emailBody = "The build for ${env.JOB_NAME} succeeded!"
                    mail to: SECURE_EMAIL_ADDR,
                        subject: "Build Success: ${env.JOB_NAME} for branch: ${env.BRANCH_NAME}",
                        body: emailBody
                }
            }
        }
        failure {
            script {
                withCredentials([string(credentialsId: 'email-address-id', variable: 'SECURE_EMAIL_ADDR')]) {
                    def emailBody = "The build for ${env.JOB_NAME} failed. Please check Jenkins for details."
                    mail to: SECURE_EMAIL_ADDR,
                        subject: "Build Failure: ${env.JOB_NAME} for branch: ${env.BRANCH_NAME}",
                        body: emailBody
                }
            }
        }
    }
}
